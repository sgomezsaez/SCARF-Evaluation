<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Mediawiki - Wikibench - Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - config" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="experiment_scenario_id" elementType="Argument">
            <stringProp name="Argument.name">experiment_scenario_id</stringProp>
            <stringProp name="Argument.value">${__P(experiment_scenario_id)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="experiment_round" elementType="Argument">
            <stringProp name="Argument.name">experiment_round</stringProp>
            <stringProp name="Argument.value">${__P(experiment_round)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workload_csv_file_path" elementType="Argument">
            <stringProp name="Argument.name">workload_csv_file_path</stringProp>
            <stringProp name="Argument.value">${__P(workload_csv_file_path)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workload_csv_column_delimiter" elementType="Argument">
            <stringProp name="Argument.name">workload_csv_column_delimiter</stringProp>
            <stringProp name="Argument.value">${__P(workload_csv_column_delimiter)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workload_csv_column_names" elementType="Argument">
            <stringProp name="Argument.name">workload_csv_column_names</stringProp>
            <stringProp name="Argument.value">${__P(workload_csv_column_names)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workload_number_of_csv_rows" elementType="Argument">
            <stringProp name="Argument.name">workload_number_of_csv_rows</stringProp>
            <stringProp name="Argument.value">${__P(workload_number_of_csv_rows)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="http_host" elementType="Argument">
            <stringProp name="Argument.name">http_host</stringProp>
            <stringProp name="Argument.value">${__P(http_host)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="http_port" elementType="Argument">
            <stringProp name="Argument.name">http_port</stringProp>
            <stringProp name="Argument.value">${__P(http_port)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="http_path" elementType="Argument">
            <stringProp name="Argument.name">http_path</stringProp>
            <stringProp name="Argument.value">${__P(http_path)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="number_of_threads" elementType="Argument">
            <stringProp name="Argument.name">number_of_threads</stringProp>
            <stringProp name="Argument.value">${__P(number_of_threads)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thread_ramp_up_period" elementType="Argument">
            <stringProp name="Argument.name">thread_ramp_up_period</stringProp>
            <stringProp name="Argument.value">${__P(thread_ramp_up_period)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loop_per_thread_count" elementType="Argument">
            <stringProp name="Argument.name">loop_per_thread_count</stringProp>
            <stringProp name="Argument.value">${__P(loop_per_thread_count)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="results_path" elementType="Argument">
            <stringProp name="Argument.name">results_path</stringProp>
            <stringProp name="Argument.value">${__P(results_path)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">${workload_csv_column_delimiter}</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${workload_csv_file_path}</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">All threads</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">${workload_csv_column_names}</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__javaScript(Math.round(${workload_number_of_csv_rows}/${number_of_threads}))/10}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${number_of_threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${thread_ramp_up_period}</stringProp>
        <longProp name="ThreadGroup.start_time">1413990892000</longProp>
        <longProp name="ThreadGroup.end_time">1413990892000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">${timer_random_delay_offset}</stringProp>
          <stringProp name="RandomTimer.range">${timer_random_delay_max}</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <PoissonRandomTimer guiclass="PoissonRandomTimerGui" testclass="PoissonRandomTimer" testname="Poisson Random Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">100</stringProp>
          <stringProp name="RandomTimer.range">50</stringProp>
        </PoissonRandomTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - thread ${__threadNum}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${http_host}</stringProp>
          <stringProp name="HTTPSampler.port">${http_port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">120000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${http_path}/${col_page}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <hostname>true</hostname>
            </value>
          </objProp>
          <stringProp name="filename">${results_path}/${experiment_scenario_id}_${experiment_round}_table.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <hostname>true</hostname>
          </value>
        </objProp>
        <stringProp name="filename">${results_path}/${experiment_scenario_id}_${experiment_round}_summary.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
